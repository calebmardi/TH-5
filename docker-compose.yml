version: '3.8'

services:
  datavision-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: datavision-app:latest
    container_name: datavision-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - LOG_LEVEL=info
    volumes:
      - app-logs:/app/logs
    networks:
      - datavision-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "com.datavision.description=DataVision App - Aplicación de visualización de datos"
      - "com.datavision.version=1.0.0"

  # Servicio opcional para desarrollo
  datavision-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    image: datavision-app:dev
    container_name: datavision-dev
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - LOG_LEVEL=debug
    volumes:
      - .:/app
      - /app/node_modules
      - dev-logs:/app/logs
    networks:
      - datavision-network
    command: npm run dev
    profiles:
      - dev

  # Nginx como reverse proxy (opcional para producción)
  nginx:
    image: nginx:alpine
    container_name: datavision-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      datavision-app:
        condition: service_healthy
    networks:
      - datavision-network
    profiles:
      - nginx

volumes:
  app-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs
  dev-logs:
    driver: local
  nginx-logs:
    driver: local

networks:
  datavision-network:
    driver: bridge
    name: datavision-network